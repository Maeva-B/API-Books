from datetime import datetime, timedelta
from typing import Optional
from jose import jwt
import secrets


# Normally, the secret key should be kept secret and ideally loaded from an environment variable
# But to simplify, we are hardcoding it here
# Key generated by https://jwtsecret.com/generate
SECRET_KEY = "68a28445f5eda90430f6ce7c11e3620ed7c88e21ad3481cbb09cf6a9be509a49f915c37ea7d8dddceeea6a42742489ff2610c43aa09e0a509ffaa0eadce82e444cf3a03f1caf05a91c6e62de070e7259caa6a0367475e075793dd0671e2acd818f2857aa7e04047ca456923dd817db1cf0aa03bb532104d1d69806ad3a272c1f1bd2da5ac8df2c6de4605dd9e5507f3c6036d0b5bb91ad1dc0a21de07e8224f8a8cefa71682b9d94759c47708a7899cbd965e7b68c06af5c68ee5fbc5b0376f613ca64953b314ffe9e6d8067c5c1fed70f714c622a9bef42f10ca0247b6fea60ea24d074d73da3c4e35c6a92ac3ac4546dbec6b4b638e5ef6f40044a5e6a5237"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    """
    Create a JWT token with the provided data.
    """
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt